import {
  Box,
  TextField,
  Grid2,
  Button,
  Alert,
  Typography,
  Select,
  InputLabel,
  FormControl,
  MenuItem,
} from "@mui/material";
import api from "./ApiConfig";
import { useEffect, useState } from "react";

const AddUsers = () => {
  const [userList, setUserList] = useState([]);
  const [employeeList, setEmployeeList] = useState([]);
  const [editedUser, setEditedUser] = useState({
    username: "",
    password: "",
    role:"USER",
    confirmPassword: "",
  });
  const [error, setError] = useState("");

  const fetchEmployees = async () => {
    try {
      const response = await api.get(`/api/employees`);
      console.log("API Response:", response.data);
      setEmployeeList(response.data);
    } catch (error) {
      console.error("Error fetching employees:", error);
      setError("Failed to fetch employees.");
      return;
    }
  };

  const fetchUsers = async () => {
    try {
      const response = await api.get("/api/users");
      console.log("Userlist fetched: ", response.data);
      setUserList(response.data);
      console.log("Userlist set to: ", userList);
    } catch (error) {
      console.error("Error fetching users", error);
    }
  };

  const isValidPassword = (password) =>
    /^(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{5,30}$/.test(password);

  const handleUserCreation = async (e) => {
    e.preventDefault();
  
    // Ensure data fetching is complete before proceeding
    await fetchEmployees();
    await fetchUsers();
  
    try {
      // Find the selected employee
      const selectedEmployee = employeeList.find(
        (employee) => employee.employeeId === Number(editedUser.employee)
      );
  
      if (!selectedEmployee) {
        setError("Invalid employee selected.");
        return;
      }
  
      // Generate the username
      let newUsername =
        selectedEmployee.firstName.slice(0, 3) +
        selectedEmployee.lastName.slice(0, 3);
  
      // Validate password
      if (!editedUser.password) {
        setError("Password is required.");
        return;
      }
  
      if (!isValidPassword(editedUser.password)) {
        setError(
          "Password must be 5-30 characters, include one number, and one uppercase letter."
        );
        return;
      }
  
      // Ensure unique username
      if (userList.some((user) => user.username === newUsername)) {
        newUsername += "1"; // Append a suffix for uniqueness
      }
      setEditedUser({...editedUser,
        username: newUsername
      })
      const newUser = { ...editedUser, username: newUsername };
  
      // Create user
      const response = await api.post("/api/users", newUser);
      console.log("User created: ", response.data);
  
      // Reset form
      setEditedUser({
        username: "",
        password: "",
        role: "",
        confirmPassword: "",
        employee: "",
      });
  
      alert(
        "User created successfully! New user created with the username " +
          newUsername
      );
    } catch (error) {
      console.error("Error creating user", error);
      setError("Failed to create user.");
    }
  };
  

  useEffect(() => {
    fetchEmployees();
    fetchUsers();
  }, []);

  return (
    <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
      <Typography variant="h2" gutterBottom></Typography>
      {error && <Alert variant="danger">{error}</Alert>}
      <Grid2 container spacing={2} direction="column">

      <Grid2 item xs={12}>
          <FormControl fullWidth>
            <InputLabel id="selectEmployee">Employee</InputLabel>
            <Select
              labelId="selectEmployee"
              value={editedUser.employee || ""} // Ensure value is not undefined
              onChange={(e) =>
                setEditedUser({
                  ...editedUser,
                  employee: e.target.value, // Store the employeeId directly
                })
              }
              variant="outlined" // Ensures proper alignment
            >
              {/* Placeholder option */}
              <MenuItem value="">Select Employee</MenuItem>

              {/* Map employee list */}
              {employeeList.map((employee) => (
                <MenuItem key={employee.employeeId} value={employee.employeeId}>
                  {employee.firstName} {employee.lastName}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid2>

        <Grid2 item xs={12}>
          <TextField
            fullWidth
            label={editedUser?.username || "Autogenerated"}
            type="text"
            disabled={true}
            value={editedUser.username}
          />
        </Grid2>

        <Grid2 item xs={12}>
          <TextField
            fullWidth
            label="Password"
            type="password"
            value={editedUser.password}
            onChange={(e) =>
              setEditedUser({ ...editedUser, password: e.target.value })
            }
            helperText="min. 5 Characters"
          />
        </Grid2>
        <Grid2 item xs={12}>
          <TextField
            fullWidth
            label="Retype password"
            type="password"
            value={editedUser.confirmPassword}
            onChange={(e) =>
              setEditedUser({ ...editedUser, confirmPassword: e.target.value })
            }
          />
        </Grid2>
        <Grid2>
          <FormControl fullWidth>
            <InputLabel id="selectRole">Role</InputLabel>
            <Select
              labelId="selectRole"
              value={editedUser.role || ""} // Ensure value is not undefined
              onChange={(e) =>
                setEditedUser({
                 ...editedUser,
                  role: e.target.value,
                })
              }
              variant="outlined" // Ensures proper alignment
            >
              <MenuItem value="USER">User</MenuItem>
              <MenuItem value="ADMIN">Admin</MenuItem>
            </Select>
          </FormControl>
        </Grid2>
       

        <Button sx={{ marginTop: 2 }} onClick={handleUserCreation}>
          Create User
        </Button>
      </Grid2>
    </Box>
  );
};
export default AddUsers;
